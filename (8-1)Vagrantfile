# -*- mode: ruby -*-
# vim: set ft=ruby :
home = 'C:/Users/io.sys/Downloads/VirtualBox VMs/lab04-bash/'
# ENV["LC_ALL"] = "en_US.UTF-8"

MACHINES = {
  :linuxlogalert => {
        :box_name => "centos/7",
        :box_version => "1804.02",
        :ip_addr => '192.168.11.101',
    :disks => {
        :sata1 => {
            :dfile => home + '/VirtualBox VMs/sata1.vdi',
            :size => 1024,
            :port => 1
        },
=begin
        :sata2 => {
            :dfile => home + '/VirtualBox VMs/sata2.vdi',
            :size => 1024, # Megabytes
            :port => 2
        },
        :sata3 => {
            :dfile => home + '/VirtualBox VMs/sata3.vdi',
            :size => 1024, # Megabytes
            :port => 3
        },
        :sata4 => {
            :dfile => home + '/VirtualBox VMs/sata4.vdi',
            :size => 1024,
            :port => 4
        }
=end
    }
  },
}

Vagrant.configure("2") do |config|

    config.vm.box_version = "1804.02"
    MACHINES.each do |boxname, boxconfig|
  
        config.vm.define boxname do |box|
  
            box.vm.box = boxconfig[:box_name]
            box.vm.host_name = boxname.to_s
  
            #box.vm.network "forwarded_port", guest: 3260, host: 3260+offset
  
            #box.vm.network "private_network", ip: boxconfig[:ip_addr]
			box.vm.network "public_network", bridge: 'Intel(R) Dual Band Wireless-AC 3165', type: "dhcp"
  
            box.vm.provider :virtualbox do |vb|
                    vb.customize ["modifyvm", :id, "--memory", "256"]
                    needsController = false
            boxconfig[:disks].each do |dname, dconf|
                unless File.exist?(dconf[:dfile])
                  vb.customize ['createhd', '--filename', dconf[:dfile], '--variant', 'Fixed', '--size', dconf[:size]]
                                  needsController =  true
                            end
  
            end
                    if needsController == true
                       vb.customize ["storagectl", :id, "--name", "SATA", "--add", "sata" ]
                       boxconfig[:disks].each do |dname, dconf|
                           vb.customize ['storageattach', :id,  '--storagectl', 'SATA', '--port', dconf[:port], '--device', 0, '--type', 'hdd', '--medium', dconf[:dfile]]
                       end
                    end
            end
  
        box.vm.provision "shell", inline: <<-SHELL
#
#  Task 8-1 - log  - unit - timer 30 sec - sh script
#
# sysconfig file
cat << EOF > /etc/sysconfig/watchlog
# Configuration file for my watchdog service
# Place it to /etc/sysconfig
# File and word in that file that we will be monit
WORD="ALERT"
LOG=/var/log/watchlog.log
EOF
# 
# log file with alert
echo "Log file, ALERT" > /var/log/watchlog.log
# 
# script                 cat /opt/watchlog.sh
echo -e '#!/bin/bash
WORD=$1
LOG=$2
DATE=$(date)
if grep $WORD $LOG &> /dev/null
then
  logger $DATE": I found the word:"$WORD"!"
else
  exit 0
fi' > /opt/watchlog.sh

# +x /opt/watchlog.sh
chmod +x /opt/watchlog.sh
# 
# Create unit         cat  /etc/systemd/system/watchlog.service
echo -e '[Unit]
Description=My watchlog service

[Service]
Type=oneshot
EnvironmentFile=/etc/sysconfig/watchlog
ExecStart=/opt/watchlog.sh $WORD $LOG' > /etc/systemd/system/watchlog.service
#
systemctl start watchlog.service
# 4 Create timer unit         cat /etc/systemd/system/timer-watchlog.timer
echo -e '[Unit]
Description=Run watchlog script every 30 second

[Timer]
# Run every 30 second
OnUnitActiveSec=30
Unit=watchlog.service

[Install]
WantedBy=multi-user.target'  > /etc/systemd/system/timer-watchlog.timer
# 
# enable timer - n/a before service enabled & start 
systemctl start timer-watchlog.timer
# enable & start service - task
systemctl enable watchlog.service
systemctl start watchlog.service
# show all timers
systemctl list-timers --all
# Show log 
tail -15 /var/log/messages
#
          SHELL
  
        end
    end
  end
  
