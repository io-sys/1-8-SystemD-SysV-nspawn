# -*- mode: ruby -*-
# vim: set ft=ruby :
home = 'C:/Users/io.sys/Downloads/VirtualBox VMs/lab04-bash/'
# ENV["LC_ALL"] = "en_US.UTF-8"

MACHINES = {
  :linuxInitToUnit => {
        :box_name => "centos/7",
        :box_version => "1804.02",
        :ip_addr => '192.168.11.101',
    :disks => {
        :sata1 => {
            :dfile => home + '/VirtualBox VMs/sata1.vdi',
            :size => 1024,
            :port => 1
        },
=begin
        :sata2 => {
            :dfile => home + '/VirtualBox VMs/sata2.vdi',
            :size => 1024, # Megabytes
            :port => 2
        },
        :sata3 => {
            :dfile => home + '/VirtualBox VMs/sata3.vdi',
            :size => 1024, # Megabytes
            :port => 3
        },
        :sata4 => {
            :dfile => home + '/VirtualBox VMs/sata4.vdi',
            :size => 1024,
            :port => 4
        }
=end
    }
  },
}

Vagrant.configure("2") do |config|

    config.vm.box_version = "1804.02"
    MACHINES.each do |boxname, boxconfig|
  
        config.vm.define boxname do |box|
  
            box.vm.box = boxconfig[:box_name]
            box.vm.host_name = boxname.to_s
  
            #box.vm.network "forwarded_port", guest: 3260, host: 3260+offset
  
            #box.vm.network "private_network", ip: boxconfig[:ip_addr]
			box.vm.network "public_network", bridge: 'Intel(R) Dual Band Wireless-AC 3165', type: "dhcp"
  
            box.vm.provider :virtualbox do |vb|
                    vb.customize ["modifyvm", :id, "--memory", "256"]
                    needsController = false
            boxconfig[:disks].each do |dname, dconf|
                unless File.exist?(dconf[:dfile])
                  vb.customize ['createhd', '--filename', dconf[:dfile], '--variant', 'Fixed', '--size', dconf[:size]]
                                  needsController =  true
                            end
  
            end
                    if needsController == true
                       vb.customize ["storagectl", :id, "--name", "SATA", "--add", "sata" ]
                       boxconfig[:disks].each do |dname, dconf|
                           vb.customize ['storageattach', :id,  '--storagectl', 'SATA', '--port', dconf[:port], '--device', 0, '--type', 'hdd', '--medium', dconf[:dfile]]
                       end
                    end
            end
  
        box.vm.provision "shell", inline: <<-SHELL
#
#
# Task 8-2 Install  spawn-fcgi from epel and rewrite init-script to unit-file
#
# Install spawn-fcgi and other package 
yum install epel-release -y && yum install spawn-fcgi php php-cli mod_fcgid httpd -y
#
# /etc/rc.d/init.d/spawn-fcgi - Init-script
#
#  uncomment parameters /etc/sysconfig/spawn-fcgi        cat /etc/sysconfig/spawn-fcgi
# Found   #alias and s/ edit from # to uncomment 
sed -i.orig -e /#SOCKET=/s/#// -e /#OPTIONS=/s/#// /etc/sysconfig/spawn-fcgi
#
# After install systemd-sysv-generator create unit file with init path 
# hereÂ /run/systemd/generator.late/  in main for provides.
# cat /run/systemd/generator.late/spawn-fcgi.service
# 
# Now create unit-file   cat /etc/systemd/system/spawn-fcgi.service
echo -e '[Unit]
Description=Spawn FastCGI scripts to be used by web servers
Documentation=man:systemd-sysv-generator(8)
After=network-online.target remote-fs.target nss-lookup.target
After=syslog.target
Wants=network-online.target

[Service]
Type=simple
SyslogIdentifier=%p
PIDFile=/var/run/%p.pid
EnvironmentFile=/etc/sysconfig/spawn-fcgi
ExecStart=/usr/bin/spawn-fcgi -n $OPTIONS
KillMode=process
ExecStopPost=/bin/rm -f /var/run/%p.pid
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target' > /etc/systemd/system/spawn-fcgi.service 
#
# insert changes in unit   .service  -  needed daemon-reload   
systemctl daemon-reload
#
# Verify 
systemctl start spawn-fcgi
systemctl status spawn-fcgi
#
          SHELL
  
        end
    end
  end
  
